import {getEl} from './dom';
/*
 * 添加事件
 * @param {variable} el 元素
 * @param {string} evname 事件类型
 * @param {function} cb 回调函数
*/
let addEv = (el,evname,cb)=>{
    if(el.addEventListener) {
        el.addEventListener(evname, cb, false);
    } else if(el.attachEvent) {
        el.attachEvent('on' + evname, cb);
    } else {
        el['on' + evname] = cb;
    }
};
/*
 * 移除事件
 * @param {variable} el 要移除事件的元素
 * @param {string} evname 事件类型
 * @param {function} cb 回调函数
*/
let rmEv = (el,evname,cb)=>{
    if(el.removeEventListener) {
        el.removeEventListener(evname, cb, false);
    } else if(el.detachEvent) {
        el.detachEvent('on' + evname, cb);
    } else {
        el['on' + evname] = cb;
    }
};
/*
 * 获取到拥有这个事件的标签名称——事件对象（如input）
 * @param {variable} event 
*/
let getEv = (event)=>{
    return event?event:window.event;
};
/*
 * 获取事件的类型
 * @param {variable} event 
*/
let evType = (event)=>{
    return event.type;
};
/*
 * 获取事件来自于哪个元素
 * @param {variable} event 
*/
let evTarget = (event)=>{
    return event.target || event.srcel;
};
/*
 * 阻止、取消事件的默认行为|属性发生
 * @param {variable} event 
*/
let preventEv = (event)=>{
    if(event.preventDefault){
        event.preventDefault();
    }else{
        event.returnValue = null;
    }
};
/*
 * 阻止冒泡行为
 * @param {variable} event 
*/
let stopPop = (event)=>{
    if(event.stopPropagation){
        event.stopPropagation();
    }else{
        event.cancelBubble = true;
    }
};

export {
    addEv,
    rmEv,
    getEv,
    evType,
    evTarget,
    preventEv,
    stopPop
};