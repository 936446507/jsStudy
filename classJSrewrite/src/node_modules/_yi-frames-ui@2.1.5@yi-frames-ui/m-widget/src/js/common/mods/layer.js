
class Yiframes {
    constructor() {

    }
}
class UI extends Yiframes {

}
class Layer extends UI {
    constructor(type, params) {
        super();
        this.type = type;
        this.params = params;
        this.init();
    }
    init() {
        let self = this;
        switch (this.type) {
            case 'toast':
                this.setCss('yi-toast', 'none');
                this.displayMethod();
                setTimeout(() => {
                    this.setCss(this.params.dom[0], {
                        display: 'none',
                        marginTop: `0`,
                        marginLeft: `0`
                    })
                }, this.params.duringTime);
                break;
            case 'modal':
                if (this.whetherFun(this.params.close) || this.whetherFun(this.params.btnOk) || this.whetherFun(this.params.btnNo)) {
                    break;
                }
                this.setCss('yi-mask', 'block');
                this.setCss('yi-modal', 'none');
                this.displayMethod();
                this.addEvent(self.getDom('btnok'), 'click', this.params.btnOk);
                this.addEvent(self.getDom('btnno'), 'click', this.params.btnNo);
                this.addEvent(self.getDom('close'), 'click', this.params.close);
                break;
            default:
        }
    }
    setCss(obj, css) {
        if (typeof obj == 'object') {
            for (let attr in css) {
                obj.style[attr] = css[attr];
            }
        } else {
            let objDom = this.getDom(obj);
            for (let item of objDom) {
                item.style.display = css;
            }
        }

    }
    displayMethod() {
        this.params.dom[0].style.display = 'block';
        this.setCss(this.params.dom[0], {
            "marginTop": `-${parseFloat(this.params.dom[0].clientHeight) / 2}px`,
            "marginLeft": `-${parseFloat(this.params.dom[0].clientWidth) / 2}px`
        })
    }
    hide(hideDom, display) {
        let dom = this.getDom(hideDom);
        for (let item of dom) {
            item.style.display = display;
        }
    }
    getDom(domNode) {
        return document.getElementsByClassName(`${domNode}`);
    }
    addEvent(domList, event, func) {
        for (let item of domList) {
            item.addEventListener(event, func, false);
        }
    }
    whetherFun(detection) {
        if (typeof detection != 'function' && detection) {
            alert('参数有误');
            return true;
        }
    }
}
export { Layer }